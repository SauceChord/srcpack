local LuaScanner = require "LuaScanner"

describe("LuaScanner", function()
    describe("new(source)", function()
        it("sets fields", function()
            local scanner = LuaScanner.new("--")
            assert.are.same("--", scanner.source, "source")
            assert.are.same(0, #scanner.tokens, "tokens")
            assert.are.same(1, scanner.start, "start")
            assert.are.same(1, scanner.current, "current")
            assert.are.same(1, scanner.line, "line")
        end)
    end)
    describe("tostring(scanner)", function()
        it("return a literal string", function()
            local scanner = LuaScanner.new("")
            assert.are.same("LuaScanner", tostring(scanner))
        end)
    end)
    describe("scanner:scanTokens()", function()
        describe("with valid inputs", function()
            it("produces an <eof> token", function()
                local scanner = LuaScanner.new("")
                local actualTokens = scanner:scanTokens()
                assert.are.same(1, #scanner.tokens, "#scanner.tokens")
                assert.are.same(1, #actualTokens, "#actualTokens")
                assert.are.same("<eof> nil nil 1", tostring(actualTokens[1]), "token")
            end)
        end)
    end)
    describe("scanner:isAtEnd()", function()
        it("returns true on new('')", function()
            local scanner = LuaScanner.new("")
            assert.is_true(scanner:isAtEnd())
        end)
        it("returns false on new(' ')", function()
            local scanner = LuaScanner.new(" ")
            assert.is_false(scanner:isAtEnd())
        end)
    end)
    describe("scanner:scanToken()", function()
        it("returns <eof>", function()
            local scanner = LuaScanner.new("")
            assert.are.same("<eof> nil nil 1", scanner:scanToken():tostring())
        end)
        it("returns LEFT_PAREN", function()
            local scanner = LuaScanner.new("(")
            assert.are.same("LEFT_PAREN ( nil 1", scanner:scanToken():tostring())
        end)
        it("returns RIGHT_PAREN", function()
            local scanner = LuaScanner.new(")")
            assert.are.same("RIGHT_PAREN ) nil 1", scanner:scanToken():tostring())
        end)
        it("returns LEFT_BRACE", function()
            local scanner = LuaScanner.new("{")
            assert.are.same("LEFT_BRACE { nil 1", scanner:scanToken():tostring())
        end)
        it("returns RIGHT_BRACE", function()
            local scanner = LuaScanner.new("}")
            assert.are.same("RIGHT_BRACE } nil 1", scanner:scanToken():tostring())
        end)
        it("returns COMMA", function()
            local scanner = LuaScanner.new(",")
            assert.are.same("COMMA , nil 1", scanner:scanToken():tostring())
        end)
        it("returns DOT", function()
            local scanner = LuaScanner.new(".")
            assert.are.same("DOT . nil 1", scanner:scanToken():tostring())
        end)
        it("returns MINUS", function()
            local scanner = LuaScanner.new("-")
            assert.are.same("MINUS - nil 1", scanner:scanToken():tostring())
        end)
        it("returns PLUS", function()
            local scanner = LuaScanner.new("+")
            assert.are.same("PLUS + nil 1", scanner:scanToken():tostring())
        end)
        it("returns SEMICOLON", function()
            local scanner = LuaScanner.new(";")
            assert.are.same("SEMICOLON ; nil 1", scanner:scanToken():tostring())
        end)
        it("returns STAR", function()
            local scanner = LuaScanner.new("*")
            assert.are.same("STAR * nil 1", scanner:scanToken():tostring())
        end)
        it("returns SLASH", function()
            local scanner = LuaScanner.new("/")
            assert.are.same("SLASH / nil 1", scanner:scanToken():tostring())
        end)
        it("returns SLASH_SLASH", function()
            local scanner = LuaScanner.new("//")
            assert.are.same("SLASH_SLASH // nil 1", scanner:scanToken():tostring())
        end)
        it("returns TILDE", function()
            local scanner = LuaScanner.new("~")
            assert.are.same("TILDE ~ nil 1", scanner:scanToken():tostring())
        end)
        it("returns TILDE_EQUAL", function()
            local scanner = LuaScanner.new("~=")
            assert.are.same("TILDE_EQUAL ~= nil 1", scanner:scanToken():tostring())
        end)
        it("returns LESS", function()
            local scanner = LuaScanner.new("<")
            assert.are.same("LESS < nil 1", scanner:scanToken():tostring())
        end)
        it("returns LESS_EQUAL", function()
            local scanner = LuaScanner.new("<=")
            assert.are.same("LESS_EQUAL <= nil 1", scanner:scanToken():tostring())
        end)
        it("returns GREATER", function()
            local scanner = LuaScanner.new(">")
            assert.are.same("GREATER > nil 1", scanner:scanToken():tostring())
        end)
        it("returns GREATER_EQUAL", function()
            local scanner = LuaScanner.new(">=")
            assert.are.same("GREATER_EQUAL >= nil 1", scanner:scanToken():tostring())
        end)
        it("returns EQUAL", function()
            local scanner = LuaScanner.new("=")
            assert.are.same("EQUAL = nil 1", scanner:scanToken():tostring())
        end)
        it("returns EQUAL_EQUAL", function()
            local scanner = LuaScanner.new("==")
            assert.are.same("EQUAL_EQUAL == nil 1", scanner:scanToken():tostring())
        end)
        it("returns COLON", function()
            local scanner = LuaScanner.new(":")
            assert.are.same("COLON : nil 1", scanner:scanToken():tostring())
        end)
        it("increments line number on \\r or \\n", function()
            -- This is what lua source llex.c does
            -- It increments line number for either \r or \n
            local scanner = LuaScanner.new("\r\n")
            assert.are.same("<eof> nil nil 3", scanner:scanToken():tostring())
        end)
        it("returns COMMENT for single line comments", function()
            local scanner = LuaScanner.new("--comment1\n--comment2")
            assert.are.same("COMMENT --comment1 nil 1", scanner:scanToken():tostring())
            assert.are.same("COMMENT --comment2 nil 2", scanner:scanToken():tostring())
        end)
        it("ignores whitespace ' ', \\f, \\t and \\v", function()
            local scanner = LuaScanner.new(" \f\t\v-- But not in comments")
            assert.are.same("COMMENT -- But not in comments nil 1", scanner:scanToken():tostring())
        end)
        it("returns MULTILINE_COMMENT", function()
            local scanner = LuaScanner.new("--[[comment1\ncomment2]]")
            local token = scanner:scanToken()
            assert.are.same("MULTILINE_COMMENT", token.type, "type")
            assert.are.same("--[[comment1\ncomment2]]", token.lexeme, "lexeme")
            assert.are.same(nil, token.literal, "line")
            assert.are.same(1, token.line, "line")
            assert.are.same("<eof> nil nil 2", scanner:scanToken():tostring())
        end)
        it("returns COLON_COLON", function()
            local scanner = LuaScanner.new("::")
            assert.are.same("COLON_COLON :: nil 1", scanner:scanToken():tostring())
        end)
        it("returns CONCAT", function()
            local scanner = LuaScanner.new("..")
            assert.are.same("CONCAT .. nil 1", scanner:scanToken():tostring())
        end)
        it("returns DOTS", function()
            local scanner = LuaScanner.new("...")
            assert.are.same("DOTS ... nil 1", scanner:scanToken():tostring())
        end)
        it("returns MOD", function()
            local scanner = LuaScanner.new("%")
            assert.are.same("MOD % nil 1", scanner:scanToken():tostring())
        end)
        it("returns POW", function()
            local scanner = LuaScanner.new("^")
            assert.are.same("POW ^ nil 1", scanner:scanToken():tostring())
        end)
    end)
    describe("scanner:match(expected)", function()
        it("returns false when at end", function()
            local scanner = LuaScanner.new("")
            assert.is_false(scanner:matchAny('*'))
        end)
        it("returns false on no match", function()
            local scanner = LuaScanner.new("+")
            assert.is_false(scanner:matchAny('*'))
        end)
        it("returns true on match", function()
            local scanner = LuaScanner.new("*")
            assert.is_true(scanner:matchAny('*'))
        end)
    end)
end)
