local LuaScanner = require "src.LuaScanner"

describe("LuaScanner", function()
    describe("new(source)", function()
        it("sets fields", function()
            local scanner = LuaScanner.new("--")
            assert.are.same("--", scanner.source, "source")
            assert.are.same(0, #scanner.tokens, "tokens")
            assert.are.same(1, scanner.start, "start")
            assert.are.same(1, scanner.current, "current")
            assert.are.same(1, scanner.line, "line")
        end)
    end)
    describe("tostring(scanner)", function()
        it("return a literal string", function()
            local scanner = LuaScanner.new("")
            assert.are.same("LuaScanner", tostring(scanner))
        end)
    end)
    describe("scanner:scanTokens()", function()
        describe("with valid inputs", function()
            it("produces an <eof> token", function()
                local scanner = LuaScanner.new("")
                local actualTokens = scanner:scanTokens()
                assert.are.same(1, #scanner.tokens, "#scanner.tokens")
                assert.are.same(1, #actualTokens, "#actualTokens")
                assert.are.same("<eof> nil nil 1", tostring(actualTokens[1]), "token")
            end)
        end)
    end)
    describe("scanner:isAtEnd()", function()
        it("returns true on new('')", function()
            local scanner = LuaScanner.new("")
            assert.is_true(scanner:isAtEnd())
        end)
        it("returns false on new(' ')", function()
            local scanner = LuaScanner.new(" ")
            assert.is_false(scanner:isAtEnd())
        end)
    end)
    describe("scanner:scanToken()", function()
        it("recognizes LEFT_PAREN", function()
            local scanner = LuaScanner.new("(")
            assert.are.same("LEFT_PAREN ( nil 1", scanner:scanToken():tostring())
        end)
        it("recognizes RIGHT_PAREN", function()
            local scanner = LuaScanner.new(")")
            assert.are.same("RIGHT_PAREN ) nil 1", scanner:scanToken():tostring())
        end)
        it("recognizes LEFT_BRACE", function()
            local scanner = LuaScanner.new("{")
            assert.are.same("LEFT_BRACE { nil 1", scanner:scanToken():tostring())
        end)
    end)
end)
