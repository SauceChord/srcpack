local LuaScanner = require "LuaScanner"
local T = require "LuaToken"

local tkScanner = nil
local tkIndex = nil

local function reset_scanner(scanner)
    tkScanner = scanner
    tkIndex = 1
end

local function expects(type, lexeme, literal, line)
    local token = tkScanner.tokens[tkIndex]
    assert.are.same(type, token.type, string.format("scanner.tokens[%d].type", tkIndex))
    assert.are.same(lexeme, token.lexeme, string.format("scanner.tokens[%d].lexeme", tkIndex))
    assert.are.same(literal, token.literal, string.format("scanner.tokens[%d].literal", tkIndex))
    assert.are.same(line, token.line, string.format("scanner.tokens[%d].line", tkIndex))
    tkIndex = tkIndex + 1
end

local function scans(source)
    local scanner = LuaScanner.new(source)
    scanner:scanTokens()
    reset_scanner(scanner)
end

describe("LuaScanner", function()
    describe("new(source)", function()
        it("sets fields", function()
            local scanner = LuaScanner.new("--")
            assert.are.same("--", scanner.source, "source")
            assert.are.same(0, #scanner.tokens, "tokens")
            assert.are.same(1, scanner.start, "start")
            assert.are.same(1, scanner.current, "current")
            assert.are.same(1, scanner.line, "line")
        end)
    end)
    describe("tostring(scanner)", function()
        it("return a literal string", function()
            local scanner = LuaScanner.new("")
            assert.are.same("LuaScanner", tostring(scanner))
        end)
    end)
    describe("scanTokens()", function()
        describe("with valid inputs", function()
            it("produces end of stream token", function()
                local scanner = LuaScanner.new("")
                scanner:scanTokens()
                reset_scanner(scanner)
                expects(T.EndOfStream, nil, nil, 1)
            end)
            it("produces three tokens from source", function()
                local scanner = LuaScanner.new("   <   >   \n")
                scanner:scanTokens()
                assert.are.same(3, #scanner.tokens, "#scanner.tokens")
                reset_scanner(scanner)
                expects(T.LessThan, "<", nil, 1)
                expects(T.GreaterThan, ">", nil, 1)
                expects(T.EndOfStream, nil, nil, 2)
            end)
            it("produces 10 tokens from source", function()
                local scanner = LuaScanner.new("<><<<\n * \t--comment*\n 'string' [[multi\nline]];")
                scanner:scanTokens()
                assert.are.same(10, #scanner.tokens, "#scanner.tokens")
                reset_scanner(scanner)
                expects(T.LessThan, "<", nil, 1)
                expects(T.GreaterThan, ">", nil, 1)
                expects(T.BinaryShl, "<<", nil, 1)
                expects(T.LessThan, "<", nil, 1)
                expects(T.Multiply, "*", nil, 2)
                expects(T.Comment, "--comment*", nil, 2)
                expects(T.String, "'string'", "string", 3)
                expects(T.String, "[[multi\nline]]", "multi\nline", 3)
                expects(T.Terminator, ";", nil, 4)
                expects(T.EndOfStream, nil, nil, 4)
            end)
            it("generates error tokens when it doesn't know what to do", function()
                scans("@@")
                expects(T.Error, "@", nil, 1)
                expects(T.Error, "@", nil, 1)
                expects(T.EndOfStream, nil, nil, 1)
            end)
            describe("comments", function()
                it("handles -- comments", function()
                    scans("--comment1\n--comment2")
                    expects(T.Comment, "--comment1", nil, 1)
                    expects(T.Comment, "--comment2", nil, 2)
                    expects(T.EndOfStream, nil, nil, 2)
                end)
                it("handles --[[]] comments", function()
                    scans("--[[comment1\ncomment2]]")
                    expects(T.MultilineComment, "--[[comment1\ncomment2]]", nil, 1)
                    expects(T.EndOfStream, nil, nil, 2)
                end)
            end)
            describe("general tokens", function()
                it("handles ; terminators", function()
                    scans(";;")
                    expects(T.Terminator, ";", nil, 1)
                    expects(T.Terminator, ";", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles { open scopes", function()
                    scans("{{")
                    expects(T.OpenScope, "{", nil, 1)
                    expects(T.OpenScope, "{", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles } close scopes", function()
                    scans("}}")
                    expects(T.CloseScope, "}", nil, 1)
                    expects(T.CloseScope, "}", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles :: label prefix/postfixes", function()
                    scans("::::")
                    expects(T.Label, "::", nil, 1)
                    expects(T.Label, "::", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles .. concatenation", function()
                    scans(".. ..")
                    expects(T.Concat, "..", nil, 1)
                    expects(T.Concat, "..", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles ... variable arguments", function()
                    scans("......") -- this is two ... after another
                    expects(T.VarArgs, "...", nil, 1)
                    expects(T.VarArgs, "...", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles assigns", function()
                    scans("= =")
                    expects(T.Assign, "=", nil, 1)
                    expects(T.Assign, "=", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
            end)
            describe("types", function()
                it("handles integer numbers", function()
                    scans("0 1 2 3 4 5 6 7 8 9 01234567890")
                    expects(T.Number, "0", 0, 1)
                    expects(T.Number, "1", 1, 1)
                    expects(T.Number, "2", 2, 1)
                    expects(T.Number, "3", 3, 1)
                    expects(T.Number, "4", 4, 1)
                    expects(T.Number, "5", 5, 1)
                    expects(T.Number, "6", 6, 1)
                    expects(T.Number, "7", 7, 1)
                    expects(T.Number, "8", 8, 1)
                    expects(T.Number, "9", 9, 1)
                    expects(T.Number, "01234567890", 1234567890, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles decimal numbers", function()
                    scans("0.0 1.3 .5")
                    expects(T.Number, "0.0", 0, 1)
                    expects(T.Number, "1.3", 1.3, 1)
                    expects(T.Number, ".5", .5, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles hexadecimal numbers", function()
                    scans("0x0 0x12345678 0xabcdef00")
                    expects(T.Number, "0x0", 0, 1)
                    expects(T.Number, "0x12345678", 305419896, 1)
                    expects(T.Number, "0xabcdef00", 2882400000, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles exponentiated numbers", function()
                    scans("2E2 2e+2 2e-2 0x2P7 0x2p+7 0x2p-3")
                    -- Usual exponent is e or E
                    expects(T.Number, "2E2", 200, 1)
                    expects(T.Number, "2e+2", 200, 1)
                    expects(T.Number, "2e-2", .02, 1)
                    -- Hexadecimal exponent is p or P
                    expects(T.Number, "0x2P7", 256, 1)
                    expects(T.Number, "0x2p+7", 256, 1)
                    expects(T.Number, "0x2p-3", .25, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles '' strings", function()
                    scans("'abc'")
                    expects(T.String, "'abc'", "abc", 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it('handles "" strings', function()
                    scans('"abc"')
                    expects(T.String, '"abc"', "abc", 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles [[]] strings", function()
                    scans("[[one\ntwo]]")
                    expects(T.String, "[[one\ntwo]]", "one\ntwo", 1)
                    expects(T.EndOfStream, nil, nil, 2)
                end)
                it("handles strings with escape characters", function()
                    scans("'one\\'two' 'three' [[\\]]]")
                    expects(T.String, "'one\\'two'", "one\\'two", 1)
                    expects(T.String, "'three'", "three", 1)
                    expects(T.String, "[[\\]]]", "\\]", 1) -- odd case?
                    expects(T.EndOfStream, nil, nil, 1)
                end)
            end)
            describe("grouping", function()
                it("handles open brackets", function()
                    scans("((")
                    expects(T.OpenBracket, "(", nil, 1)
                    expects(T.OpenBracket, "(", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles close brackets", function()
                    scans("))")
                    expects(T.CloseBracket, ")", nil, 1)
                    expects(T.CloseBracket, ")", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles commas", function()
                    scans(",,")
                    expects(T.Comma, ",", nil, 1)
                    expects(T.Comma, ",", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
            end)
            describe("indexing", function()
                it("handles open indexes", function()
                    scans("[ [")
                    expects(T.OpenIndex, "[", nil, 1)
                    expects(T.OpenIndex, "[", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles close indexs", function()
                    scans("]]")
                    expects(T.CloseIndex, "]", nil, 1)
                    expects(T.CloseIndex, "]", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles field selectors", function()
                    scans(". .")
                    expects(T.FieldSelector, ".", nil, 1)
                    expects(T.FieldSelector, ".", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles method call selectors", function()
                    scans(":")
                    expects(T.MethodCall, ":", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
            end)
            describe("binary", function()
                it("handles not operators", function()
                    scans("~~")
                    expects(T.BinaryNot, "~", nil, 1)
                    expects(T.BinaryNot, "~", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles and operators", function()
                    scans("&&")
                    expects(T.BinaryAnd, "&", nil, 1)
                    expects(T.BinaryAnd, "&", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles or operators", function()
                    scans("||")
                    expects(T.BinaryOr, "|", nil, 1)
                    expects(T.BinaryOr, "|", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles left bit shifts", function()
                    scans("<<<<")
                    expects(T.BinaryShl, "<<", nil, 1)
                    expects(T.BinaryShl, "<<", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles right bit shifts", function()
                    scans(">>")
                    expects(T.BinaryShr, ">>", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
            end)
            describe("math", function()
                it("handles minuses", function()
                    scans("- -")
                    expects(T.Minus, "-", nil, 1)
                    expects(T.Minus, "-", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("returns pluses", function()
                    scans("++")
                    expects(T.Plus, "+", nil, 1)
                    expects(T.Plus, "+", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles multipys", function()
                    scans("**")
                    expects(T.Multiply, "*", nil, 1)
                    expects(T.Multiply, "*", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles divides", function()
                    scans("/ /")
                    expects(T.Divide, "/", nil, 1)
                    expects(T.Divide, "/", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles floor divisions", function()
                    scans("////")
                    expects(T.DivideFloor, "//", nil, 1)
                    expects(T.DivideFloor, "//", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles moduluses", function()
                    scans("%%")
                    expects(T.Modulus, "%", nil, 1)
                    expects(T.Modulus, "%", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles exponents", function()
                    scans("^^")
                    expects(T.Exponent, "^", nil, 1)
                    expects(T.Exponent, "^", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
            end)
            describe("logic", function()
                it("handles equals", function()
                    scans("====")
                    expects(T.Equals, "==", nil, 1)
                    expects(T.Equals, "==", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles not equals", function()
                    scans("~=~=")
                    expects(T.NotEquals, "~=", nil, 1)
                    expects(T.NotEquals, "~=", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles less thans", function()
                    scans("< <")
                    expects(T.LessThan, "<", nil, 1)
                    expects(T.LessThan, "<", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles less than or equals", function()
                    scans("<=<=")
                    expects(T.LessThanOrEquals, "<=", nil, 1)
                    expects(T.LessThanOrEquals, "<=", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles greater thans", function()
                    scans("> >")
                    expects(T.GreaterThan, ">", nil, 1)
                    expects(T.GreaterThan, ">", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
                it("handles greater than or equals", function()
                    scans(">=>=")
                    expects(T.GreaterThanOrEquals, ">=", nil, 1)
                    expects(T.GreaterThanOrEquals, ">=", nil, 1)
                    expects(T.EndOfStream, nil, nil, 1)
                end)
            end)
            -------------------------------------------------------------------
            it("increments line number on \\r or \\n", function()
                -- This is what lua source llex.c does:
                -- it increments line number for either \r or \n
                scans("\r\n")
                expects(T.EndOfStream, nil, nil, 3)
            end)
            it("ignores whitespace ' ', \\f, \\t and \\v", function()
                scans(" \f\t\v-- But not in comments")
                expects(T.Comment, "-- But not in comments", nil, 1)
                expects(T.EndOfStream, nil, nil, 1)
            end)
        end)
    end)
    describe("scanner:isAtEnd()", function()
        it("returns true on new('')", function()
            local scanner = LuaScanner.new("")
            assert.is_true(scanner:isAtEnd())
        end)
        it("returns false on new(' ')", function()
            local scanner = LuaScanner.new(" ")
            assert.is_false(scanner:isAtEnd())
        end)
    end)
    describe("scanner:matchAny(expected)", function()
        it("returns false when at end", function()
            local scanner = LuaScanner.new("")
            assert.is_false(scanner:matchAny('*'))
        end)
        it("returns false on no match", function()
            local scanner = LuaScanner.new("+")
            assert.is_false(scanner:matchAny('*'))
        end)
        it("returns true on match", function()
            local scanner = LuaScanner.new("*")
            assert.is_true(scanner:matchAny('*'))
        end)
    end)
    describe("scanner:matchMany(expected) #focus", function()
        it("returns false when at end", function()
            local scanner = LuaScanner.new("")
            assert.is_false(scanner:matchMany('--'))
            assert.are.same(1, scanner.current, "current")
        end)
        it("returns true on match", function()
            local scanner = LuaScanner.new("--")
            assert.is_true(scanner:matchMany('--'))
            assert.are.same(3, scanner.current, "current")
        end)
        it("returns true on several matches", function()
            local scanner = LuaScanner.new("--abb")
            assert.is_true(scanner:matchMany('--'))
            assert.are.same(3, scanner.current, "current")
            assert.is_true(scanner:matchMany('a'))
            assert.are.same(4, scanner.current, "current")
            assert.is_true(scanner:matchMany('bb'))
            assert.are.same(6, scanner.current, "current")
        end)
    end)
end)
